plugins {
    id 'java'
}

group 'com.depromeet'
version '0.0.1-SNAPSHOT'

repositories {
    mavenCentral()
}

jar {
    enabled = false
}

dependencies {
    implementation project(':streetdrop-domain')
    implementation project(':streetdrop-common')
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'com.mysql:mysql-connector-j'
    implementation 'org.hibernate:hibernate-spatial:6.2.2.Final'
    implementation 'org.locationtech.jts:jts-core'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
    implementation 'io.micrometer:micrometer-core'
    implementation "com.slack.api:bolt:1.29.2"
    implementation "com.slack.api:bolt-servlet:1.29.2"
    implementation "com.slack.api:bolt-jetty:1.30.0"

    implementation "com.querydsl:querydsl-jpa:5.0.0:jakarta"
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'io.awspring.cloud:spring-cloud-starter-aws:2.4.4'
}


jacocoTestReport {
    reports {
        html.required.set(true)
        xml.required.set(true)
        csv.required.set(false)
        xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
    }
    def QueryDslDomains = []
    for (qPattern in '**/QA'..'**/QZ') {
        QueryDslDomains.add(qPattern + '*')
    }
    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, excludes: [
                            "**/*Application*",
                            "**/*Config*",
                            "**/*Dto*",
                            "**/*Request*",
                            "**/*Response*",
                            "**/*Interceptor*",
                            "**/*Exception*"
                    ] + QueryDslDomains)
                })
        )
    }
    finalizedBy jacocoTestCoverageVerification
}

test {
    useJUnitPlatform()
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}
